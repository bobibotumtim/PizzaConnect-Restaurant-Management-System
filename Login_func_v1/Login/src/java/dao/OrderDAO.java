package dao;

import java.sql.*;
import java.util.*;
import models.*;

public class OrderDAO extends DBContext {

    private Connection externalConn; // ‚öôÔ∏è D√πng n·∫øu servlet truy·ªÅn v√†o (tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát)

    // ‚úÖ Constructor m·∫∑c ƒë·ªãnh (d√πng ph·ªï bi·∫øn)
    public OrderDAO() {
        super(); // ‚öôÔ∏è R·∫•t quan tr·ªçng ‚Äî m·ªü connection t·ª´ DBContext
        // Kh√¥ng t·ª± ƒë·ªông t·∫°o b·∫£ng v√¨ database ƒë√£ c√≥ s·∫µn
        System.out.println("‚úÖ OrderDAO initialized with existing database");
    }

    // ‚úÖ Constructor c√≥ tham s·ªë (√≠t d√πng, ch·ªâ khi c·∫ßn connection b√™n ngo√†i)
    public OrderDAO(Connection conn) {
        this.externalConn = conn;
    }

    // ‚úÖ H√†m l·∫•y connection ‚Äî ∆∞u ti√™n external n·∫øu c√≥
    private Connection useConnection() throws SQLException {
        if (externalConn != null) return externalConn;
        return getConnection();
    }
    
    // ‚úÖ Public method ƒë·ªÉ ki·ªÉm tra connection
    public Connection getConnection() {
        return connection;
    }

    // üü¢ T·∫°o ƒë∆°n h√†ng m·ªõi c√πng chi ti·∫øt
    public int createOrder(int customerID, int employeeID, int tableID, String note, List<OrderDetail> orderDetails) throws Exception {
        int orderId = 0;
        Connection con = null;

        try {
            con = useConnection();
            con.setAutoCommit(false);

            // 1Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng
            String sqlOrder = """
                INSERT INTO [Order] 
                (CustomerID, EmployeeID, TableID, OrderDate, Status, PaymentStatus, TotalPrice, Note)
                VALUES (?, ?, ?, GETDATE(), 0, 'Unpaid', 0, ?)
            """;
            try (PreparedStatement psOrder = con.prepareStatement(sqlOrder, Statement.RETURN_GENERATED_KEYS)) {
                psOrder.setInt(1, customerID);
                psOrder.setInt(2, employeeID);
                psOrder.setInt(3, tableID);
                psOrder.setString(4, note);
                psOrder.executeUpdate();

                try (ResultSet rs = psOrder.getGeneratedKeys()) {
                    if (rs.next()) orderId = rs.getInt(1);
                }
            }

            // 2Ô∏è‚É£ Ch√®n chi ti·∫øt (n·∫øu c√≥)
            if (orderDetails != null && !orderDetails.isEmpty()) {
                double totalPrice = 0;
                String sqlDetail = """
                    INSERT INTO [OrderDetail] 
                    (OrderID, ProductID, Quantity, TotalPrice, SpecialInstructions)
                    VALUES (?, ?, ?, ?, ?)
                """;
                try (PreparedStatement psDetail = con.prepareStatement(sqlDetail)) {
                    for (OrderDetail d : orderDetails) {
                        psDetail.setInt(1, orderId);
                        psDetail.setInt(2, d.getProductID());
                        psDetail.setInt(3, d.getQuantity());
                        psDetail.setDouble(4, d.getTotalPrice());
                        psDetail.setString(5, d.getSpecialInstructions());
                        psDetail.addBatch();
                        totalPrice += d.getTotalPrice();
                    }
                    psDetail.executeBatch();

                    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
                    String sqlUpdate = "UPDATE [Order] SET TotalPrice = ? WHERE OrderID = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdate)) {
                        psUpdate.setDouble(1, totalPrice);
                        psUpdate.setInt(2, orderId);
                        psUpdate.executeUpdate();
                    }
                }
            }

            con.commit();
            return orderId;

        } catch (Exception e) {
            if (con != null) con.rollback();
            e.printStackTrace();
            throw e;
        } finally {
            // ‚öôÔ∏è ƒê√≥ng connection ch·ªâ n·∫øu kh√¥ng ph·∫£i connection b√™n ngo√†i
            if (externalConn == null && con != null) con.close();
        }
    }

    // üü¢ L·∫•y danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
    public List<Order> getOrdersByStatus(int status) {
        List<Order> list = new ArrayList<>();
        String sql = "SELECT * FROM [Order] WHERE Status = ? ORDER BY OrderDate DESC";

        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, status);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Order o = new Order();
                    o.setOrderID(rs.getInt("OrderID"));
                    o.setCustomerID(rs.getInt("CustomerID"));
                    o.setEmployeeID(rs.getInt("EmployeeID"));
                    o.setTableID(rs.getInt("TableID"));
                    o.setOrderDate(rs.getTimestamp("OrderDate"));
                    o.setStatus(rs.getInt("Status"));
                    o.setPaymentStatus(rs.getString("PaymentStatus"));
                    o.setTotalPrice(rs.getDouble("TotalPrice"));
                    o.setNote(rs.getString("Note"));
                    list.add(o);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("‚úÖ Orders loaded by status " + status + ": " + list.size());
        return list;
    }

    // üü¢ L·∫•y danh s√°ch ƒë∆°n h√†ng
    public List<Order> getAll() {
        List<Order> list = new ArrayList<>();
        String sql = "SELECT * FROM [Order] ORDER BY OrderDate DESC";

        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                Order o = new Order();
                o.setOrderID(rs.getInt("OrderID"));
                o.setCustomerID(rs.getInt("CustomerID"));
                o.setEmployeeID(rs.getInt("EmployeeID"));
                o.setTableID(rs.getInt("TableID"));
                o.setOrderDate(rs.getTimestamp("OrderDate"));
                o.setStatus(rs.getInt("Status"));
                o.setPaymentStatus(rs.getString("PaymentStatus"));
                o.setTotalPrice(rs.getDouble("TotalPrice"));
                o.setNote(rs.getString("Note"));
                
                // Load OrderDetails cho m·ªói order (d√πng c√πng connection, tr√°nh ƒë√≥ng connection ngo√†i v√≤ng l·∫∑p)
                List<OrderDetail> details = getOrderDetailsByOrderId(o.getOrderID(), con);
                o.setDetails(details);
                
                list.add(o);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("‚úÖ Orders loaded: " + list.size());
        return list;
    }

    // üü¢ L·∫•y ƒë∆°n h√†ng theo ID
    public Order getOrderById(int orderId) {
        String sql = "SELECT * FROM [Order] WHERE OrderID = ?";
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, orderId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Order(
                        rs.getInt("OrderID"),
                        rs.getInt("CustomerID"),
                        rs.getInt("EmployeeID"),
                        rs.getInt("TableID"),
                        rs.getTimestamp("OrderDate"),
                        rs.getInt("Status"),
                        rs.getString("PaymentStatus"),
                        rs.getDouble("TotalPrice"),
                        rs.getString("Note")
                    );
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    // üü¢ L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng ‚Äì s·ª≠ d·ª•ng connection truy·ªÅn v√†o (kh√¥ng ƒë√≥ng connection cha)
    private List<OrderDetail> getOrderDetailsByOrderId(int orderId, Connection con) {
        List<OrderDetail> list = new ArrayList<>();
        String sql = """
            SELECT od.*, p.ProductName 
            FROM OrderDetail od
            LEFT JOIN Product p ON od.ProductID = p.ProductID
            WHERE od.OrderID = ?
        """;
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, orderId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    OrderDetail detail = new OrderDetail();
                    detail.setOrderDetailID(rs.getInt("OrderDetailID"));
                    detail.setOrderID(rs.getInt("OrderID"));
                    detail.setProductID(rs.getInt("ProductID"));
                    detail.setQuantity(rs.getInt("Quantity"));
                    detail.setTotalPrice(rs.getDouble("TotalPrice"));
                    String productName = rs.getString("ProductName");
                    String specialInstructions = rs.getString("SpecialInstructions");
                    if (productName != null) {
                        detail.setSpecialInstructions("Lo·∫°i: " + productName + (specialInstructions != null ? " - " + specialInstructions : ""));
                    } else {
                        detail.setSpecialInstructions(specialInstructions);
                    }
                    list.add(detail);
                }
            }
        } catch (Exception e) {
            System.out.println("Error getting order details: " + e.getMessage());
            e.printStackTrace();
        }
        return list;
    }

    // üü¢ L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng ‚Äì API c√¥ng khai (d√πng connection ri√™ng, an to√†n khi g·ªçi ƒë·ªôc l·∫≠p)
    public List<OrderDetail> getOrderDetailsByOrderId(int orderId) {
        List<OrderDetail> list = new ArrayList<>();
        try (Connection con = useConnection()) {
            if (con == null) return list;
            return getOrderDetailsByOrderId(orderId, con);
        } catch (Exception e) {
            System.out.println("Error getting order details (public): " + e.getMessage());
            e.printStackTrace();
        }
        return list;
    }

    // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    public boolean updateOrderStatus(int orderId, int status) {
        String sql = "UPDATE [Order] SET Status = ? WHERE OrderID = ?";
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, status);
            ps.setInt(2, orderId);
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
    public boolean updatePaymentStatus(int orderId, String paymentStatus) {
        String sql = "UPDATE [Order] SET PaymentStatus = ? WHERE OrderID = ?";
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, paymentStatus);
            ps.setInt(2, orderId);
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // üü¢ X√≥a ƒë∆°n h√†ng (v√† chi ti·∫øt)
    public boolean deleteOrder(int orderId) {
        String deleteDetails = "DELETE FROM [OrderDetail] WHERE OrderID = ?";
        String deleteOrder = "DELETE FROM [Order] WHERE OrderID = ?";
        try (Connection con = useConnection()) {
            con.setAutoCommit(false);

            try (PreparedStatement ps1 = con.prepareStatement(deleteDetails)) {
                ps1.setInt(1, orderId);
                ps1.executeUpdate();
            }

            int result;
            try (PreparedStatement ps2 = con.prepareStatement(deleteOrder)) {
                ps2.setInt(1, orderId);
                result = ps2.executeUpdate();
            }

            con.commit();
            return result > 0;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // üü¢ Th√™m d·ªØ li·ªáu m·∫´u ƒë·ªÉ test
    public void insertSampleData() {
        try {
            // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
            if (countAllOrders() > 0) {
                System.out.println("‚úÖ Sample data already exists");
                return;
            }
            
            // Th√™m ƒë∆°n h√†ng m·∫´u
            String sql = """
                INSERT INTO [Order] 
                (CustomerID, EmployeeID, TableID, OrderDate, Status, PaymentStatus, TotalPrice, Note)
                VALUES 
                (1, 1, 1, GETDATE(), 0, 'Unpaid', 400000, 'ƒê∆°n h√†ng m·∫´u 1'),
                (2, 1, 2, GETDATE(), 2, 'Paid', 500000, 'ƒê∆°n h√†ng m·∫´u 2')
            """;
            
            try (Connection con = useConnection();
                 PreparedStatement ps = con.prepareStatement(sql)) {
                ps.executeUpdate();
                System.out.println("‚úÖ Sample orders inserted successfully");
            }
            
            // Th√™m OrderDetail m·∫´u
            String detailSql = """
                INSERT INTO OrderDetail (OrderID, ProductID, Quantity, TotalPrice, SpecialInstructions)
                VALUES 
                (1, 1, 2, 400000, 'Lo·∫°i: Pepperoni'),
                (2, 2, 2, 500000, 'Lo·∫°i: Hawaiian')
            """;
            
            try (Connection con = useConnection();
                 PreparedStatement ps = con.prepareStatement(detailSql)) {
                ps.executeUpdate();
                System.out.println("‚úÖ Sample order details inserted successfully");
            }
            
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Error inserting sample data: " + e.getMessage());
        }
    }
    
    // üü¢ T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
    private void createTablesIfNotExist() {
        try {
            Connection con = useConnection();
            if (con == null) {
                System.out.println("‚ùå Cannot create tables - no database connection");
                return;
            }
            
            // T·∫°o b·∫£ng Customer
            String createCustomerTable = """
                IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Customer')
                CREATE TABLE Customer (
                    CustomerID int IDENTITY(1,1) PRIMARY KEY,
                    CustomerName nvarchar(100) NOT NULL,
                    Phone nvarchar(20),
                    Email nvarchar(100),
                    Address nvarchar(200)
                )
            """;
            
            // T·∫°o b·∫£ng Product
            String createProductTable = """
                IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Product')
                CREATE TABLE Product (
                    ProductID int IDENTITY(1,1) PRIMARY KEY,
                    ProductName nvarchar(100) NOT NULL,
                    Price decimal(10,2) NOT NULL,
                    Description nvarchar(500),
                    Category nvarchar(50)
                )
            """;
            
            // T·∫°o b·∫£ng Order
            String createOrderTable = """
                IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Order')
                CREATE TABLE [Order] (
                    OrderID int IDENTITY(1,1) PRIMARY KEY,
                    CustomerID int NOT NULL,
                    EmployeeID int NOT NULL,
                    TableID int NOT NULL,
                    OrderDate datetime2 DEFAULT GETDATE(),
                    Status int DEFAULT 0,
                    PaymentStatus nvarchar(20) DEFAULT 'Unpaid',
                    TotalPrice decimal(10,2) DEFAULT 0,
                    Note nvarchar(500)
                )
            """;
            
            // T·∫°o b·∫£ng OrderDetail
            String createOrderDetailTable = """
                IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'OrderDetail')
                CREATE TABLE OrderDetail (
                    OrderDetailID int IDENTITY(1,1) PRIMARY KEY,
                    OrderID int NOT NULL,
                    ProductID int NOT NULL,
                    Quantity int NOT NULL,
                    TotalPrice decimal(10,2) NOT NULL,
                    SpecialInstructions nvarchar(500)
                )
            """;
            
            // Th·ª±c thi c√°c c√¢u l·ªánh t·∫°o b·∫£ng
            try (Statement stmt = con.createStatement()) {
                stmt.execute(createCustomerTable);
                System.out.println("‚úÖ Customer table created/verified");
                
                stmt.execute(createProductTable);
                System.out.println("‚úÖ Product table created/verified");
                
                stmt.execute(createOrderTable);
                System.out.println("‚úÖ Order table created/verified");
                
                stmt.execute(createOrderDetailTable);
                System.out.println("‚úÖ OrderDetail table created/verified");
            }
            
            // Th√™m d·ªØ li·ªáu m·∫´u cho Customer v√† Product
            insertSampleCustomersAndProducts(con);
            
        } catch (Exception e) {
            System.out.println("‚ùå Error creating tables: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void insertSampleCustomersAndProducts(Connection con) {
        try {
            // Th√™m Customer m·∫´u
            String insertCustomer = """
                IF NOT EXISTS (SELECT 1 FROM Customer WHERE CustomerID = 1)
                INSERT INTO Customer (CustomerName, Phone, Email) VALUES 
                ('Nguy·ªÖn V√¢n A', '0123456789', 'vana@email.com'),
                ('Tr·∫ßn Th·ªã B', '0987654321', 'thib@email.com')
            """;
            
            // Th√™m Product m·∫´u
            String insertProduct = """
                IF NOT EXISTS (SELECT 1 FROM Product WHERE ProductID = 1)
                INSERT INTO Product (ProductName, Price, Description, Category) VALUES 
                ('Pepperoni Pizza', 200000, 'Pizza v·ªõi pepperoni v√† ph√¥ mai', 'Pizza'),
                ('Hawaiian Pizza', 250000, 'Pizza v·ªõi d·ª©a v√† giƒÉm b√¥ng', 'Pizza'),
                ('Margherita Pizza', 180000, 'Pizza c·ªï ƒëi·ªÉn v·ªõi c√† chua v√† mozzarella', 'Pizza')
            """;
            
            try (Statement stmt = con.createStatement()) {
                stmt.execute(insertCustomer);
                System.out.println("‚úÖ Sample customers inserted");
                
                stmt.execute(insertProduct);
                System.out.println("‚úÖ Sample products inserted");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Error inserting sample customers/products: " + e.getMessage());
        }
    }

    // üü¢ ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng
    public int countAllOrders() {
        String sql = "SELECT COUNT(*) FROM [Order]";
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            if (rs.next()) return rs.getInt(1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    // üü¢ Th√™m ƒë∆°n h√†ng ƒë∆°n gi·∫£n (form th√™m)
    public void insert(Order o) {
        String sql = """
            INSERT INTO [Order] 
            (CustomerID, EmployeeID, TableID, OrderDate, Status, PaymentStatus, TotalPrice, Note)
            VALUES (?, ?, ?, GETDATE(), ?, ?, ?, ?)
        """;
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, o.getCustomerID());
            ps.setInt(2, o.getEmployeeID());
            ps.setInt(3, o.getTableID());
            ps.setInt(4, o.getStatus());
            ps.setString(5, o.getPaymentStatus());
            ps.setDouble(6, o.getTotalPrice());
            ps.setString(7, o.getNote());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // üü¢ C·∫≠p nh·∫≠t ƒë∆°n h√†ng (form s·ª≠a)
    public void update(Order o) {
        String sql = """
            UPDATE [Order]
            SET CustomerID=?, EmployeeID=?, TableID=?, OrderDate=?, Status=?, PaymentStatus=?, TotalPrice=?, Note=?
            WHERE OrderID=?
        """;
        try (Connection con = useConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
            System.out.println("üîÑ Updating Order ID: " + o.getOrderID());
            System.out.println("   CustomerID: " + o.getCustomerID());
            System.out.println("   EmployeeID: " + o.getEmployeeID());
            System.out.println("   TableID: " + o.getTableID());
            System.out.println("   Status: " + o.getStatus());
            System.out.println("   PaymentStatus: " + o.getPaymentStatus());
            System.out.println("   TotalPrice: " + o.getTotalPrice());
            System.out.println("   Note: " + o.getNote());
            
            ps.setInt(1, o.getCustomerID());
            ps.setInt(2, o.getEmployeeID());
            ps.setInt(3, o.getTableID());
            
            // X·ª≠ l√Ω OrderDate - n·∫øu null th√¨ gi·ªØ nguy√™n
            if (o.getOrderDate() != null) {
                ps.setTimestamp(4, new java.sql.Timestamp(o.getOrderDate().getTime()));
            } else {
                ps.setTimestamp(4, new java.sql.Timestamp(System.currentTimeMillis()));
            }
            
            ps.setInt(5, o.getStatus());
            ps.setString(6, o.getPaymentStatus());
            ps.setDouble(7, o.getTotalPrice());
            ps.setString(8, o.getNote());
            ps.setInt(9, o.getOrderID());
            
            int rowsAffected = ps.executeUpdate();
            System.out.println("‚úÖ Order updated successfully. Rows affected: " + rowsAffected);
            
        } catch (Exception e) {
            System.out.println("‚ùå Error updating order: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
